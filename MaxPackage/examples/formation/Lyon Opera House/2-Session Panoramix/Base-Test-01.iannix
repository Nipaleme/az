/*
 *	IanniX Score File
 */
/*
 *	This method is called first.
 *	It is the good section for asking user for script global variables (parameters).
 *	
 * 	This section is never overwritten by IanniX when saving.
 */
function askUserForParameters() {
	//title("The title of the parameter box");
	//ask("Group name of the parameter (only for display purposes)", "Parameter label", "myGlobalVar", "theDefaultValue");
}

/*
 *	This method stores all the operations made through IanniX scripts.
 *	You can add some commands here to make your own scripts!
 *	Scripts are written in Javascript but even with a limited knowledge of Javascript, many types of useful scripts can be created.
 *	
 *	Beyond the standard javascript commands, the run() function is used to send commands to IanniX.
 *	Commands must be provided to run() as a single string.
 *	For example, run("zoom 100"); sets the display zoom to 100%.
 *
 *	To combine numeric parameters with text commands to produce a string, use the concatenation operator.
 *	In the following example center_x and center_y are in numeric variables and must be concatenated to the command string.
 *	Example: run("setPos current " + center_x + " " + center_y + " 0");
 *	
 *	To learn IanniX commands, perform an manipulation in IanniX graphical user interface, and see the Helper window.
 *	You'll see the syntax of the command-equivalent action.
 *	
 *	And finally, remember that most of commands must target an object.
 *	Global syntax is always run("<command name> <target> <arguments>");
 *	Targets can be an ID (number) or a Group ID (string name of group) (please see "Info" tab in Inspector panel).
 *	Special targets are "current" (last used ID), "all" (all the objects) and "lastCurve" (last used curve).
 *	
 * 	This section is never overwritten by IanniX when saving.
 */
function makeWithScript() {
	//Clears the score
	run("clear");
	//Resets rotation
	run("rotate 0 0 0");
	//Resets score viewport center
	run("center 0 0");
	//Resets score zoom
	run("zoom 100");
}

/*
 *	When an incoming message is received, this method is called.
 *		- <protocol> tells information about the nature of message ("osc", "midi", "direct…)
 *		- <host> and <port> gives the origin of message, specially for IP protocols (for OpenSoundControl, UDP or TCP, it is the IP and port of the application that sends the message)
 *		- <destination> is the supposed destination of message (for OpenSoundControl it is the path, for MIDI it is Control Change or Note on/off…)
 *		- <values> are an array of arguments contained in the message
 *	
 * 	This section is never overwritten by IanniX when saving.
 */
function onIncomingMessage(protocol, host, port, destination, values) {
	if((protocol == "osc") && (destination == "/track/indices") && (values.length > 0)) {
		for (i=0, j=values.length ; i<j ; i+=1){
			run("add cursor " + values[i] + "");
		}
        
    } else if((protocol == "osc") && (destination == "/track/message") && (values.length > 0)) {
		for (i=0, j=values.length ; i<j ; i+=1){
			run("setmessage " + + values[i] + " 40, osc://127.0.0.1:4002/track/" + (values[i]-1000) + "/xyz cursor_xPos cursor_yPos cursor_zPos");
		}
        
    } 
	//Logs a message in the console (open "Config" tab from Inspector panel and see "Message log")
	console("Received on '" + protocol + "' (" + host + ":" + port + ") to '" + destination + "', " + values.length + " values : ");
	
	//Browses all the arguments and displays them in log window
	for(var valueIndex = 0 ; valueIndex < values.length ; valueIndex++)
		console("- arg " + valueIndex + " = " + values[valueIndex]);
}


/*
 *	This method stores all the operations made through the graphical user interface.
 *	You are not supposed to modify this section, but it can be useful to remove some stuff that you added accidentaly.
 *	
 * 	Be very careful! This section is automaticaly overwritten when saving a score.
 */
function madeThroughGUI() {
//GUI: NEVER EVER REMOVE THIS LINE
	run("zoom 265.734");
	run("rotate 0 0 0");
	run("speed 1");

	run("registertexture background -7.5  10.6061 7.5 -10.6061 plan.png");

	run("add curve 1");
	run("setpos current -3.03202 7.76573 0");
	var points1 = [
		{x: 0, y: 0, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 8.47027, y: -3.11407, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 8.55331, y: -5.60532, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 11.4598, y: -5.64684, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 9.79893, y: -12, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
	];
	for(var i = 0 ; i < points1.length ; i++)
		run("setpointat current " + i + " " + points1[i].x + " " + points1[i].y + " " + points1[i].z + " " + points1[i].c1x + " " + points1[i].c1y + " " + points1[i].c1z + " " + points1[i].c2x + " " + points1[i].c2y + " " + points1[i].c2z);

	run("add curve 7");
	run("setpos current -13.3575 7.15346 0");
	var points7 = [
		{x: 0, y: 0, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: -1.01561, y: -4.90144, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 1.45719, y: -8.25739, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: -0.6182, y: -9.40548, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 1.81044, y: -11.6575, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
	];
	for(var i = 0 ; i < points7.length ; i++)
		run("setpointat current " + i + " " + points7[i].x + " " + points7[i].y + " " + points7[i].z + " " + points7[i].c1x + " " + points7[i].c1y + " " + points7[i].c1z + " " + points7[i].c2x + " " + points7[i].c2y + " " + points7[i].c2z);



//GUI: NEVER EVER REMOVE THIS LINE
}


/*
 *	This method stores all the operations made by other softwares through one of the IanniX interfaces.
 *	You are not supposed to modify this section, but it can be useful to remove some stuff that you or a third party software added accidentaly.
 *	
 * 	Be very careful! This section is automaticaly overwritten when saving a score.
 */
function madeThroughInterfaces() {
//INTERFACES: NEVER EVER REMOVE THIS LINE
	run("add curve 3");
	run("setpos current 0 0 0");
	var points3 = [
		{x: 0, y: 0, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: -2.90646, y: -9.42525, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 8.17962, y: -12.3317, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 6.18662, y: -14.6569, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 1.5778, y: -13.2037, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
	];
	for(var i = 0 ; i < points3.length ; i++)
		run("setpointat current " + i + " " + points3[i].x + " " + points3[i].y + " " + points3[i].z + " " + points3[i].c1x + " " + points3[i].c1y + " " + points3[i].c1z + " " + points3[i].c2x + " " + points3[i].c2y + " " + points3[i].c2z);

	var points1 = [
		{x: 0, y: 0, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 8.47027, y: -3.11407, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 8.55331, y: -5.60532, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 11.4598, y: -5.64684, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 9.79893, y: -12, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
	];
	for(var i = 0 ; i < points1.length ; i++)
		run("setpointat 1 " + i + " " + points1[i].x + " " + points1[i].y + " " + points1[i].z + " " + points1[i].c1x + " " + points1[i].c1y + " " + points1[i].c1z + " " + points1[i].c2x + " " + points1[i].c2y + " " + points1[i].c2z);

	run("add curve 6");
	run("setpos current 0 0 0");
	run("setpointsellipse current 10.0706 10.1835");
	run("setequation current cartesian cos(2*t*PI)*(param1*2*15+sin(2*t*PI*10 *param2)*10*param3),sin(2*t*PI)*(param1*2*15+sin(2*t*PI*10*param2)*10*param3),0");
	run("setequationparam current param1 0.311333");
	run("setequationparam current param2 1.7");
	run("setequationparam current param3 0.2");
	run("setequationparam current param4 0.5");
	run("setequationparam current param5 0.5");

	run("add curve 7");

	run("add curve 4");
	run("setpos current 0 0 0");
	run("setpointsellipse current 4 4");

	run("add curve 5");
	run("setpos current 0 0 0");
	run("setpointsellipse current 5.88002 5.89168");
	run("setequation current cartesian cos(2*t*PI)*(param1*2*15+sin(2*t*PI*10 *param2)*10*param3),sin(2*t*PI)*(param1*2*15+sin(2*t*PI*10*param2)*10*param3),0");
	run("setequationparam current param1 0.175");
	run("setequationparam current param2 0.7");
	run("setequationparam current param3 0.1");
	run("setequationparam current param4 0.5");
	run("setequationparam current param5 0.5");

	run("settime 1002 0");
	run("setpattern 1002 0 0 1 0");
	run("setpos 1002 8.59345 11.3297 0");
	run("setcoloractive 1002 231 90 32 255");
	run("setlabel 1002 Voix");

	run("settime 1003 0");
	run("setpattern 1003 0 0 1 0");
	run("setpos 1003 -0.731745 -6.8812 0");
	run("setcoloractive 1003 30 144 255 255");
	run("setlabel 1003 aa");

	run("setpos 1001 -1.06223 7.04032 0");
	run("setcoloractive 1001 30 144 255 255");
	run("setlabel 1001 Guitar");

	run("settime 1006 0");
	run("setpattern 1006 0 0 1 0");
	run("setpos 1006 1.7432 -6.77947 0");
	run("setcoloractive 1006 187 165 30 255");
	run("setlabel 1006 Mono aa");

	run("setpos 1007 0 1 0");
	run("setcoloractive 1007 30 144 255 255");
	run("setlabel 1007 Mono 1");

	run("settime 1004 0");
	run("setpattern 1004 0 0 1 0");
	run("setpos 1004 1.34744 1.78941 0");
	run("setcoloractive 1004 30 144 255 255");
	run("setlabel 1004 Mono 4");

	run("settime 1005 0");
	run("setpattern 1005 0 0 1 0");
	run("setpos 1005 5.43945 -3.72028 0");
	run("setcoloractive 1005 30 144 255 255");
	run("setlabel 1005 Moaano 5");



//INTERFACES: NEVER EVER REMOVE THIS LINE
}


/*
 *	This method is called last.
 *	It allows you to modify your hand-drawn score (made through graphical user interface).
 *	
 * 	This section is never overwritten by IanniX when saving.
 */
function alterateWithScript() {
	
}


/*
 *	//APP VERSION: NEVER EVER REMOVE THIS LINE
 *	Made with IanniX 0.9.20
 *	//APP VERSION: NEVER EVER REMOVE THIS LINE
 */



/*
    This file is part of IanniX, a graphical real-time open-source sequencer for digital art
    Copyright (C) 2010-2015 — IanniX Association

    Project Manager: Thierry Coduys (http://www.le-hub.org)
    Development:     Guillaume Jacquemin (https://www.buzzinglight.com)

    This file was written by Guillaume Jacquemin.

    IanniX is a free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

